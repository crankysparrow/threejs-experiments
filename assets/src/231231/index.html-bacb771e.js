var se=Object.defineProperty;var ie=(t,r,e)=>r in t?se(t,r,{enumerable:!0,configurable:!0,writable:!0,value:e}):t[r]=e;var i=(t,r,e)=>(ie(t,typeof r!="symbol"?r+"":r,e),e);import{b as U,p as oe,f as _,q as re,V as h,r as V,s as W,W as ne,H as ae,S as le,U as ce,t as b,G as Z,u as Y,v as D,w as he,O as de,x as me,y as $,I as L,z as j,E as ue,Q as pe,A as q,J as B,K as ge,D as fe,d as ye,X as we}from"../../three.module-26cbe395.js";import{G as xe}from"../../lil-gui.esm-ee8b5e9f.js";import{S as ve}from"../../stats.module-8826aad6.js";/* empty css                  */import{l as O,m as E,c as Q}from"../../utils-100a9827.js";import{E as Se,S as be,W as _e}from"../../World-13c8b4f6.js";import{T as ze}from"../../timer-9e29d8f4.js";import"../../OrbitControls-1db9ef1b.js";class k extends U{constructor(r,e={}){super(r),this.isReflector=!0,this.type="Reflector",this.camera=new oe;const s=this,o=e.color!==void 0?new _(e.color):new _(8355711),n=e.textureWidth||512,a=e.textureHeight||512,l=e.clipBias||0,m=e.shader||k.ReflectorShader,g=e.multisample!==void 0?e.multisample:4,c=new re,d=new h,x=new h,w=new h,f=new V,u=new h(0,0,-1),S=new W,z=new h,R=new h,P=new W,C=new V,y=this.camera,I=new ne(n,a,{samples:g,type:ae}),A=new le({name:m.name!==void 0?m.name:"unspecified",uniforms:ce.clone(m.uniforms),fragmentShader:m.fragmentShader,vertexShader:m.vertexShader});A.uniforms.tDiffuse.value=I.texture,A.uniforms.color.value=o,A.uniforms.textureMatrix.value=C,this.material=A,this.onBeforeRender=function(p,J,M){if(x.setFromMatrixPosition(s.matrixWorld),w.setFromMatrixPosition(M.matrixWorld),f.extractRotation(s.matrixWorld),d.set(0,0,1),d.applyMatrix4(f),z.subVectors(x,w),z.dot(d)>0)return;z.reflect(d).negate(),z.add(x),f.extractRotation(M.matrixWorld),u.set(0,0,-1),u.applyMatrix4(f),u.add(w),R.subVectors(x,u),R.reflect(d).negate(),R.add(x),y.position.copy(z),y.up.set(0,1,0),y.up.applyMatrix4(f),y.up.reflect(d),y.lookAt(R),y.far=M.far,y.updateMatrixWorld(),y.projectionMatrix.copy(M.projectionMatrix),C.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),C.multiply(y.projectionMatrix),C.multiply(y.matrixWorldInverse),C.multiply(s.matrixWorld),c.setFromNormalAndCoplanarPoint(d,x),c.applyMatrix4(y.matrixWorldInverse),S.set(c.normal.x,c.normal.y,c.normal.z,c.constant);const v=y.projectionMatrix;P.x=(Math.sign(S.x)+v.elements[8])/v.elements[0],P.y=(Math.sign(S.y)+v.elements[9])/v.elements[5],P.z=-1,P.w=(1+v.elements[10])/v.elements[14],S.multiplyScalar(2/S.dot(P)),v.elements[2]=S.x,v.elements[6]=S.y,v.elements[10]=S.z+1-l,v.elements[14]=S.w,s.visible=!1;const K=p.getRenderTarget(),ee=p.xr.enabled,te=p.shadowMap.autoUpdate;p.xr.enabled=!1,p.shadowMap.autoUpdate=!1,p.setRenderTarget(I),p.state.buffers.depth.setMask(!0),p.autoClear===!1&&p.clear(),p.render(J,y),p.xr.enabled=ee,p.shadowMap.autoUpdate=te,p.setRenderTarget(K);const T=M.viewport;T!==void 0&&p.state.viewport(T),s.visible=!0},this.getRenderTarget=function(){return I},this.dispose=function(){I.dispose(),s.material.dispose()}}}k.ReflectorShader={name:"ReflectorShader",uniforms:{color:{value:null},tDiffuse:{value:null},textureMatrix:{value:null}},vertexShader:`
		uniform mat4 textureMatrix;
		varying vec4 vUv;

		#include <common>
		#include <logdepthbuf_pars_vertex>

		void main() {

			vUv = textureMatrix * vec4( position, 1.0 );

			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

			#include <logdepthbuf_vertex>

		}`,fragmentShader:`
		uniform vec3 color;
		uniform sampler2D tDiffuse;
		varying vec4 vUv;

		#include <logdepthbuf_pars_fragment>

		float blendOverlay( float base, float blend ) {

			return( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );

		}

		vec3 blendOverlay( vec3 base, vec3 blend ) {

			return vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );

		}

		void main() {

			#include <logdepthbuf_fragment>

			vec4 base = texture2DProj( tDiffuse, vUv );
			gl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );

			#include <tonemapping_fragment>
			#include <colorspace_fragment>

		}`};class Pe extends Se{constructor(e){super();i(this,"pos",new b);i(this,"posPrev",new b);i(this,"screenPos",new b);i(this,"posLerp",new b);i(this,"speed",0);i(this,"angle",0);i(this,"velocity",0);i(this,"lerpVal",.1);i(this,"sizes");i(this,"onMouseMove",e=>{this.posPrev.copy(this.pos),this.screenPos.set(e.clientX,e.clientY),this.pos.set(e.clientX/this.sizes.width*2-1,-(e.clientY/this.sizes.height)*2+1),this.posLerp.lerp(this.pos,this.lerpVal),this.trigger("mouseMove")});i(this,"calculateMovement",()=>{this.speed=this.pos.distanceTo(this.posPrev),this.velocity=O(this.velocity,this.speed,this.lerpVal),this.angle=Math.atan2(this.posLerp.y-this.posPrev.y,this.posLerp.x-this.posPrev.x)});i(this,"drag",()=>{this.velocity>.001?this.velocity*=.99:this.velocity=0});this.sizes=e,document.addEventListener("mousemove",this.onMouseMove)}}class Ce extends Z{constructor(e,{size:s=new b(100,100),mirrorColor:o="#66ffff",screenColor:n="#bf94ff",screenOpacity:a=.2,screenMetalness:l=1,screenRoughness:m=.6,planeDist:g=.1,position:c=new h(-25,-10,-25)}){super();i(this,"mirror");i(this,"floor");i(this,"geometry");i(this,"windowSizes");i(this,"_planeDist");i(this,"_size");i(this,"_mirrorColor");i(this,"onWindowResize",()=>{this.mirror.getRenderTarget().setSize(this.windowSizes.width*this.windowSizes.pixelRatio,this.windowSizes.height*this.windowSizes.pixelRatio)});i(this,"dispose",()=>{this.remove(this.mirror,this.floor),this.mirror.dispose(),this.floor.material.dispose(),this.geometry.dispose()});this.windowSizes=e,this._size=s,this._planeDist=g,this._mirrorColor=o,this.geometry=new Y(s.x,s.y),this.floor=new U(this.geometry,new D({roughness:m,metalness:l,transparent:!0,opacity:a,color:n})),this.mirror=new k(this.geometry,{clipBias:.003,textureWidth:this.windowSizes.width*this.windowSizes.pixelRatio,textureHeight:this.windowSizes.height*this.windowSizes.pixelRatio,color:o}),this.add(this.mirror,this.floor),this.position.copy(c),this.rotation.set(Math.PI*-.5,0,0),this.floor.position.z=this._planeDist,this.windowSizes.on("resize",this.onWindowResize)}get mirrorColor(){return this._mirrorColor}set mirrorColor(e){this._mirrorColor=e,this.mirror.dispose(),this.remove(this.mirror),this.mirror=new k(this.geometry,{clipBias:.003,textureWidth:this.windowSizes.width*this.windowSizes.pixelRatio,textureHeight:this.windowSizes.height*this.windowSizes.pixelRatio,color:this._mirrorColor}),this.add(this.mirror)}get planeDist(){return this._planeDist}set planeDist(e){this._planeDist=e,this.floor.position.z=this._planeDist}get size(){return this._size}set size(e){this._size=e,this.geometry=new Y(e.x,e.y),this.floor.geometry=this.geometry,this.mirror.geometry=this.geometry}}const Me=`
    float t = uTime * uSpeed + uNoiseId * 100.0;
    vec3 tx = vec3(transformed.x, transformed.y, transformed.z + t);
    vec3 ty = vec3(transformed.y, transformed.z, transformed.z + t);
    vec3 tz = vec3(transformed.z, transformed.x, transformed.z + t);

    transformed.x += cnoise(tx) * uNoiseAmount;
    transformed.y += cnoise(ty) * uNoiseAmount;
    transformed.z += cnoise(tz) * uNoiseAmount;
`,ke=`
vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}
vec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}
vec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}

float cnoise(vec3 P) {
  vec3 Pi0 = floor(P); // Integer part for indexing
  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1
  Pi0 = mod(Pi0, 289.0);
  Pi1 = mod(Pi1, 289.0);
  vec3 Pf0 = fract(P); // Fractional part for interpolation
  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0
  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
  vec4 iy = vec4(Pi0.yy, Pi1.yy);
  vec4 iz0 = Pi0.zzzz;
  vec4 iz1 = Pi1.zzzz;

  vec4 ixy = permute(permute(ix) + iy);
  vec4 ixy0 = permute(ixy + iz0);
  vec4 ixy1 = permute(ixy + iz1);

  vec4 gx0 = ixy0 / 7.0;
  vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;
  gx0 = fract(gx0);
  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
  vec4 sz0 = step(gz0, vec4(0.0));
  gx0 -= sz0 * (step(0.0, gx0) - 0.5);
  gy0 -= sz0 * (step(0.0, gy0) - 0.5);

  vec4 gx1 = ixy1 / 7.0;
  vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;
  gx1 = fract(gx1);
  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
  vec4 sz1 = step(gz1, vec4(0.0));
  gx1 -= sz1 * (step(0.0, gx1) - 0.5);
  gy1 -= sz1 * (step(0.0, gy1) - 0.5);

  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);
  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);
  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);
  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);
  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);
  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);
  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);
  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);

  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));
  g000 *= norm0.x;
  g010 *= norm0.y;
  g100 *= norm0.z;
  g110 *= norm0.w;
  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));
  g001 *= norm1.x;
  g011 *= norm1.y;
  g101 *= norm1.z;
  g111 *= norm1.w;

  float n000 = dot(g000, Pf0);
  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
  float n111 = dot(g111, Pf1);

  vec3 fade_xyz = fade(Pf0);
  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); 
  return 2.2 * n_xyz;
}
`,H={"THREE.Vector3":(t,r)=>(t.lerp(r,.1),t.distanceTo(r)>.01),number:(t,r)=>(t=O(t,r,.1),Math.abs(t-r)>.01),"THREE.Color":(t,r)=>(t.lerp(r,.1),t.getHexString()!==r.getHexString())};class X{constructor(r){i(this,"raf",0);i(this,"tick",()=>{this._lerpStrategy(this._prop,this._target)?window.requestAnimationFrame(this.tick):this.raf=0});i(this,"cancel",()=>{this.raf&&window.cancelAnimationFrame(this.raf),this.raf=0});r instanceof he?this._target=r.value:this._target=r,this._prop=r,r instanceof h?this._lerpStrategy=H["THREE.Vector3"]:r instanceof _?this._lerpStrategy=H["THREE.Color"]:this._lerpStrategy=H.number}set(r){this._target=r,this.raf&&window.cancelAnimationFrame(this.raf),this.raf=window.requestAnimationFrame(this.tick)}}class Re extends U{constructor({radius:e=4,color:s="#fff",metalness:o=.5,roughness:n=.5,vary:a=.1,noiseSpeed:l=.001,noiseAmount:m=.3}={}){let g=new de(1,1),c=new D({color:s,metalness:o,roughness:n});c.onBeforeCompile=d=>{this.shader=d,this.updateShaderCode(d,l,m)};super(g,c);i(this,"_scale");i(this,"_color");i(this,"_vary");i(this,"noiseId",Math.random()*100);i(this,"shader");i(this,"initPositions");i(this,"setPositions",()=>{let e=this.initPositions.count,s=new h;this.geometry.setAttribute("position",this.initPositions.clone());let o=this.geometry.getAttribute("position"),n={};for(let a=0;a<e;a++){s.fromBufferAttribute(this.initPositions,a);let l=`${s.x.toFixed(2)}_${s.y.toFixed(2)}_${s.z.toFixed(2)}`;n[l]||(n[l]={x:s.x+(Math.random()-.5)*this._vary,y:s.y+(Math.random()-.5)*this._vary,z:s.z+(Math.random()-.5)*this._vary});let{x:m,y:g,z:c}=n[l];o.setXYZ(a,m,g,c)}this.geometry.computeVertexNormals()});i(this,"updateShaderCode",(e,s,o)=>{e.uniforms.uTime={value:0},e.uniforms.uNoiseId={value:this.noiseId},e.uniforms.uSpeed={value:s},e.uniforms.uNoiseAmount={value:o},e.vertexShader=e.vertexShader.replace("#include <common>",`#include <common>
         uniform float uTime;
         uniform float uNoiseId;
         uniform float uNoiseAmount;
         uniform float uSpeed;
         ${ke}`),e.vertexShader=e.vertexShader.replace("#include <begin_vertex>",`#include <begin_vertex>
         ${Me}`)});i(this,"tick",e=>{this.shader&&(this.shader.uniforms.uTime.value=e)});i(this,"dispose",()=>{this._color.cancel(),this._scale.cancel(),this.geometry.dispose(),this.material.dispose()});this._vary=a,this.scale.set(e,e,e),this._color=new X(this.material.color),this._scale=new X(this.scale),this.initPositions=this.geometry.getAttribute("position").clone(),this.setPositions()}set vary(e){this._vary=e,this.setPositions()}get vary(){return this._vary}set noiseAmount(e){this.shader&&(this.shader.uniforms.uNoiseAmount.value=e)}set noiseSpeed(e){this.shader&&(this.shader.uniforms.uSpeed.value=e)}setScale(e){this._scale.set(new h(e,e,e))}setColor(e,s=!1){s?this.material.color.copy(e):this._color.set(e)}}const Ie={red:{start:.67,end:.05,offset:.4},green:{start:-.62,end:.23,offset:.23},blue:{start:0,end:1.04,offset:.25}};class Ae extends Z{constructor(e,s,{innerPosY:o=6,posY:n=1,outerOpacity:a=.5,metalness:l=.5,roughness:m=.5,coneRadius:g=7.6,coneHeight:c=22,coneSegments:d=100,ringRadius:x=50,count:w=14,colorOpts:f=Ie,wonkyShapeOptions:u={}}={}){super();i(this,"outerGeometry");i(this,"outerMaterial");i(this,"outerInstance");i(this,"wonkyShapes",[]);i(this,"colorOpts");i(this,"camera");i(this,"mouse");i(this,"raycaster",new me);i(this,"intersecting",null);i(this,"_coneRadius");i(this,"_coneHeight");i(this,"_coneSegments");i(this,"_ringRadius");i(this,"_wonkyRadius");i(this,"_wonkyVary");i(this,"_wonkyMetalness");i(this,"_wonkyRoughness");i(this,"_innerPosY");i(this,"_wonkyShapeNoiseAmount");i(this,"_wonkyShapeNoiseSpeed");i(this,"needsUpdate",{innerMaterial:!1,innerPos:!1});i(this,"rebuild",()=>{this.wonkyShapes.forEach(s=>{s.dispose(),this.remove(s)}),this.wonkyShapes=[];let e={radius:this._wonkyRadius,vary:this._wonkyVary,metalness:this._wonkyMetalness,roughness:this._wonkyRoughness,noiseAmount:this._wonkyShapeNoiseAmount,noiseSpeed:this._wonkyShapeNoiseSpeed};for(let s=0;s<this.count;s++){let o=new Re(e);this.wonkyShapes.push(o),this.add(o)}this.setShapes()});i(this,"updateColorOpt",(e,s,o)=>{this.colorOpts[e][s]=o,this.setShapes()});i(this,"resetOuterGeometry",()=>{let e=this.outerGeometry;this.outerGeometry=new $(this._coneRadius,this._coneHeight,this._coneSegments),this.outerInstance.geometry=this.outerGeometry,e.dispose()});i(this,"getColorCoordAtIndex",(e,s)=>{const{offset:o,start:n,end:a}=this.colorOpts[s];let l=E(Math.sin((e/this.count+o)*Math.PI*2),-1,1,n,a);return Q(l,0,1)});i(this,"setShapes",()=>{const e=new V,s=new pe;s.setFromEuler(new ue(Math.PI,0,0));for(let o=0;o<this.count;o++){const n=o/this.count*Math.PI*2,a=new h(Math.cos(n)*this._ringRadius,0,Math.sin(n)*this._ringRadius);e.makeRotationFromQuaternion(s),e.setPosition(a),this.outerInstance.setMatrixAt(o,e),a.y+=this._innerPosY,this.wonkyShapes[o].position.copy(a);let l=new _(this.getColorCoordAtIndex(o,"red"),this.getColorCoordAtIndex(o,"green"),this.getColorCoordAtIndex(o,"blue"));this.outerInstance.setColorAt(o,l),this.wonkyShapes[o].material.userData.color=l,this.wonkyShapes[o].material.color.set(l)}this.outerInstance.instanceMatrix.needsUpdate=!0,this.outerInstance.instanceColor&&(this.outerInstance.instanceColor.needsUpdate=!0)});i(this,"findIntersectedIndex",()=>{this.raycaster.setFromCamera(this.mouse.pos,this.camera);let s=this.raycaster.intersectObjects(this.children).find(o=>o.object===this.outerInstance);if(s)return s.instanceId});i(this,"checkIntersects",()=>{let e=this.findIntersectedIndex();if(e||e===0){if(e===this.intersecting)return;this.resetIntersecting(),this.setIntersecting(e)}else this.resetIntersecting()});i(this,"setIntersecting",e=>{this.wonkyShapes[e].setColor(new _("#ffffff")),this.wonkyShapes[e].setScale(this._wonkyRadius*1.25),this.intersecting=e});i(this,"resetIntersecting",()=>{if(!this.intersecting&&this.intersecting!==0)return;let e=this.wonkyShapes[this.intersecting],s=new _(this.getColorCoordAtIndex(this.intersecting,"red"),this.getColorCoordAtIndex(this.intersecting,"green"),this.getColorCoordAtIndex(this.intersecting,"blue"));e.setColor(s),e.setScale(this._wonkyRadius),this.intersecting=null});i(this,"tick",e=>{this.checkIntersects();for(let s=0;s<this.count;s++){let o=this.wonkyShapes[s];this.needsUpdate.innerMaterial&&(o.material.metalness=this._wonkyMetalness,o.material.roughness=this._wonkyRoughness),this.needsUpdate.innerPos&&(o.position.y=this._innerPosY),o.tick(e)}this.needsUpdate.innerMaterial=!1,this.needsUpdate.innerPos=!1});i(this,"dispose",()=>{this.wonkyShapes.forEach(e=>{e.dispose(),this.remove(e)}),this.outerMaterial.dispose(),this.outerGeometry.dispose(),this.remove(this.outerInstance),this.outerInstance.dispose()});this.mouse=s,this.camera=e,this.colorOpts=f,this._ringRadius=x,this._coneRadius=g,this._coneHeight=c,this._coneSegments=d,this._innerPosY=o,this.position.y=n,this.outerGeometry=new $(this._coneRadius,this._coneHeight,this._coneSegments),this.outerGeometry.attributes.position.needsUpdate=!0,this.outerMaterial=new D({color:"#fff",opacity:a,metalness:l,roughness:m,transparent:!0}),this.outerInstance=new L(this.outerGeometry,this.outerMaterial,w),this.outerInstance.instanceMatrix.setUsage(j),this.outerInstance.position.set(0,0,0),this._wonkyRadius=u.radius??4,this._wonkyVary=u.vary??.2,this._wonkyMetalness=u.metalness??.5,this._wonkyRoughness=u.roughness??.5,this._wonkyShapeNoiseAmount=u.noiseAmount??.3,this._wonkyShapeNoiseSpeed=u.noiseSpeed??.001,this.rebuild(),this.add(this.outerInstance)}get coneRadius(){return this._coneRadius}get coneHeight(){return this._coneHeight}get coneSegments(){return this._coneSegments}set coneRadius(e){this._coneRadius=e,this.resetOuterGeometry()}set coneHeight(e){this._coneHeight=e,this.resetOuterGeometry()}set coneSegments(e){this._coneSegments=e,this.resetOuterGeometry()}get wonkyRadius(){return this._wonkyRadius}get wonkyVary(){return this._wonkyVary}get wonkyMetalness(){return this._wonkyMetalness}get wonkyRoughness(){return this._wonkyRoughness}get innerPosY(){return this._innerPosY}get wonkyShapeNoiseAmount(){return this._wonkyShapeNoiseAmount}get wonkyShapeNoiseSpeed(){return this._wonkyShapeNoiseSpeed}set wonkyRadius(e){this._wonkyRadius=e,this.wonkyShapes.forEach(s=>{s.setScale(e)})}set wonkyVary(e){this._wonkyVary=e,this.rebuild()}set wonkyMetalness(e){this._wonkyMetalness=e,this.needsUpdate.innerMaterial=!0}set wonkyRoughness(e){this._wonkyRoughness=e,this.needsUpdate.innerMaterial=!0}set innerPosY(e){this._innerPosY=e,this.needsUpdate.innerPos=!0}set wonkyShapeNoiseAmount(e){this._wonkyShapeNoiseAmount=e,this.wonkyShapes.forEach(s=>s.noiseAmount=e)}set wonkyShapeNoiseSpeed(e){this._wonkyShapeNoiseSpeed=e,this.wonkyShapes.forEach(s=>s.noiseSpeed=e)}get count(){return this.outerInstance.count}get ringRadius(){return this._ringRadius}set ringRadius(e){this._ringRadius=e,this.setShapes()}set count(e){this.remove(this.outerInstance),this.outerInstance.dispose(),this.outerInstance=new L(this.outerGeometry,this.outerMaterial,e),this.outerInstance.instanceMatrix.setUsage(j),this.outerInstance.position.set(0,0,0),this.add(this.outerInstance),this.rebuild()}}const Oe={clearColor:"#f2ebff",lightOptions:{ambient:{visible:!0,intensity:4.5,color:"#fafafa"},directional:{color:"#e5ffff",intensity:5.8,visible:!0,position:new h(-150,-6,-30)},point:{color:"#29ffa2",intensity:4.5,visible:!0,position:new h(-100,-124,-58),distance:0,decay:.1}},ringOptions:{innerPosY:6,posY:1,outerOpacity:.5,metalness:.36,roughness:.47,coneRadius:7.6,coneHeight:22,coneSegments:100,ringRadius:50,count:18,wonkyShapeOptions:{vary:.2,radius:3.7},colorOpts:{red:{start:.22,end:.89,offset:-.02},green:{start:-.37,end:.78,offset:-.38},blue:{start:.06,end:.97,offset:1.42}}},mirrorOptions:{mirrorColor:"#428a8a",screenColor:"#e8b5b5",screenRoughness:0,screenMetalness:0,screenOpacity:.4}},He={clearColor:"#090f11",lightOptions:{ambient:{color:"#fafafa",visible:!1},directional:{visible:!0,intensity:4,color:"#ffffff",position:new h(0,10,50)},point:{color:"#ffffff",visible:!1}},ringOptions:{colorOpts:{red:{start:0,end:.3,offset:1.19},green:{start:.19,end:.89,offset:0},blue:{start:.19,end:1.19,offset:.6}}},mirrorOptions:{screenOpacity:.15,screenRoughness:.16,screenMetalness:.16,screenColor:"#ffffff",mirrorColor:"#ffffff"}},Fe={clearColor:"ff7a7a",lightOptions:{ambient:{color:"#25ad6d",intensity:5.6,visible:!0},directional:{visible:!0,intensity:5,color:"#ff0000",position:new h(-50,-107,7)},point:{color:"#8437ff",visible:!1,position:new h(-10,80,45),intensity:9,distance:0,decay:.1}},ringOptions:{innerPosY:6,posY:1,outerOpacity:.3,metalness:.83,roughness:.34,coneRadius:7.6,coneHeight:22,coneSegments:100,ringRadius:50,count:14,wonkyShapeOptions:{vary:.2,radius:4,roughness:.5,metalness:.39,noiseAmount:.3,noiseSpeed:.001},colorOpts:{red:{start:.34,end:0,offset:1},green:{start:1.15,end:1,offset:0},blue:{start:0,end:0,offset:.51}}},mirrorOptions:{mirrorColor:"#4b52b9",screenColor:"#ffffff",screenRoughness:.12,screenMetalness:.16,screenOpacity:.52}},Ne={clearColor:"#0c0911"},F=[Ne,Oe,He,Fe],N=(t,r,e)=>{const s=r.addFolder(t.type);let o={color:t.color.getHexString()};s.addColor(o,"color").onChange(n=>t.color.set(n)),s.add(t,"intensity",0,15,.1),s.add(t,"visible"),!(t instanceof q)&&(s.add(t.position,"x",-300,300,1),s.add(t.position,"y",-300,300,1),s.add(t.position,"z",-300,300,1),t instanceof B&&(s.add(t,"distance",0,5e3,1),s.add(t,"decay",0,5,.1)),e&&(e.visible=!1,s.add(e,"visible").name("helper"),s.onChange(()=>e.update())))},Ge=(t,r)=>{const e=r.addFolder("Shapes").close();e.add(t.outerMaterial,"metalness",0,1,.01),e.add(t.outerMaterial,"roughness",0,1,.01),e.add(t.outerMaterial,"opacity",0,1,.01),e.add(t,"wonkyMetalness",0,1,.01),e.add(t,"wonkyRoughness",0,1,.01),e.add(t,"wonkyVary",0,5,.1),e.add(t,"wonkyRadius",0,5,.1),e.add(t,"coneRadius",0,50,.1),e.add(t,"coneHeight",0,50,.1),e.add(t,"coneSegments",0,200,1),e.add(t,"ringRadius",0,100,1),e.add(t,"count",0,100,1),e.add(t,"innerPosY",-10,10,.1),e.add(t,"wonkyShapeNoiseSpeed",0,.05,1e-4).name("noiseSpeed"),e.add(t,"wonkyShapeNoiseAmount",0,5,.01).name("noiseAmount"),e.add(t.position,"y",-10,10,.1);const s=r.addFolder("Shape Colors").close();for(let o of Object.keys(t.colorOpts))for(let n of Object.keys(t.colorOpts[o]))s.add(t.colorOpts[o],n,-1,2,.01).name(`${o} ${n}`).onChange(a=>t.updateColorOpt(o,n,a))},Ve=t=>{let{gui:r,mirror:e}=t;const s=r.addFolder("Floor/Mirror");s.add(e.floor.material,"opacity",0,1,.01),s.add(e.floor.material,"roughness",0,3,.01).name("floorRoughness"),s.add(e.floor.material,"metalness",0,3,.01).name("floorMetalness"),s.add(t.mirrorX,"min",-100,100,1).name("mirrorXmin"),s.add(t.mirrorX,"max",-100,100,1).name("mirrorXmax"),s.add(t.mirrorZ,"min",-100,100,1).name("mirrorZmin"),s.add(t.mirrorZ,"max",-100,100,1).name("mirrorZmax");const o={mirrorColor:e.mirrorColor,floorColor:e.floor.material.color.getHexString()};s.addColor(o,"floorColor").onChange(n=>{e.floor.material.color.set(n)}),s.addColor(o,"mirrorColor").onChange(n=>{e.mirrorColor=n}),s.add(e.size,"x",0,1e3,.1).name("width").onChange(n=>{e.size=new b(n,e.size.y)}),s.add(e.size,"y",0,1e3,.1).name("height").onChange(n=>{e.size=new b(e.size.x,n)}),s.close()},Ee=t=>{const r=t.gui.addFolder("Scene").close();let e=new _;t.world.renderer.getClearColor(e);let s={clearColor:e.getHexString()};r.addColor(s,"clearColor").onChange(o=>{t.clearColor=o}),r.add(t.world.controls,"enabled").name("controls").onChange(o=>{o||t.world.camera.position.copy(t.cameraPosDefault)}),r.add(t,"maxAcceleration",0,.5,.01),r.add(t,"velMult",0,1,.01)},Ue=t=>{Ee(t);let r=t.gui.addFolder("Lights").close();N(t.lights.ambient,r),N(t.lights.directional,r,t.lights.dirHelper),N(t.lights.point,r,t.lights.pointHelper),Ge(t.ring,t.gui),Ve(t);let e={preset:"",getPreset:()=>De(t)},s=[""].concat(Object.keys(F));t.gui.add(e,"preset",s).onChange(o=>{F[+o]&&(t.dispose(),t.setFromParams(F[+o]))}),t.gui.add(e,"getPreset")},De=t=>{const r=o=>`new THREE.Vector3(${o.x}, ${o.y}, ${o.z})`;let e={clearColor:`#${t.clearColor}`,lightOptions:{ambient:{color:`#${t.lights.ambient.color.getHexString()}`,intensity:t.lights.ambient.intensity,visible:t.lights.ambient.visible},directional:{visible:t.lights.directional.visible,intensity:t.lights.directional.intensity,color:`#${t.lights.directional.color.getHexString()}`,position:r(t.lights.directional.position)},point:{color:`#${t.lights.point.color.getHexString()}`,visible:t.lights.point.visible,position:r(t.lights.point.position),intensity:t.lights.point.intensity,distance:t.lights.point.distance,decay:t.lights.point.decay}},ringOptions:{innerPosY:t.ring.innerPosY,posY:t.ring.position.y,outerOpacity:t.ring.outerMaterial.opacity,metalness:t.ring.outerMaterial.metalness,roughness:t.ring.outerMaterial.roughness,coneRadius:t.ring.coneRadius,coneHeight:t.ring.coneHeight,coneSegments:t.ring.coneSegments,ringRadius:t.ring.ringRadius,count:t.ring.count,wonkyShapeOptions:{vary:t.ring.wonkyVary,radius:t.ring.wonkyRadius,roughness:t.ring.wonkyRoughness,metalness:t.ring.wonkyMetalness,noiseAmount:t.ring.wonkyShapeNoiseAmount,noiseSpeed:t.ring.wonkyShapeNoiseSpeed},colorOpts:{...t.ring.colorOpts}},mirrorOptions:{mirrorColor:t.mirror.mirrorColor,screenColor:`#${t.mirror.floor.material.color.getHexString()}`,screenRoughness:t.mirror.floor.material.roughness,screenMetalness:t.mirror.floor.material.metalness,screenOpacity:t.mirror.floor.material.opacity}},s=JSON.stringify(e,null,3);s=s.replace(/"([^"]+)":/g,"$1:"),s=s.replace(/"(new THREE.Vector3\(.+, .+, .+\))"/g,"$1"),navigator.clipboard.writeText(s).then(()=>{console.log("copied preset to clipboard")})};ge.enabled=!0;const G={ambient:{color:"#fafafa",visible:!1},directional:{color:"#e5ffff",intensity:5.8,visible:!0,position:new h(-150,-6,-30)},point:{color:"#d9c2ff",intensity:9,distance:0,decay:.1,position:new h(-10,57,45),visible:!0}};class Te{constructor(r={}){i(this,"stats");i(this,"gui");i(this,"world");i(this,"sizes");i(this,"timer");i(this,"mouse");i(this,"lights");i(this,"ring");i(this,"mirror");i(this,"maxAcceleration",.08);i(this,"velMult",.98);i(this,"cameraPosDefault",new h(0,40,100));i(this,"mirrorX",{min:-30,max:30});i(this,"mirrorZ",{min:-10,max:10});i(this,"wheelVelocity",0);i(this,"wheelAcceleration",0);i(this,"setFromParams",({clearColor:r="#0c0911",maxAcceleration:e,velMult:s,cameraPosDefault:o,ringOptions:n={},mirrorOptions:a={},lightOptions:l={}})=>{e&&(this.maxAcceleration=e),s&&(this.velMult=s),o&&(this.cameraPosDefault=o),this.world.renderer.setClearColor(r),this.setCameraAndControls(),this.ring=new Ae(this.world.camera,this.mouse,n),this.mirror=new Ce(this.sizes,a);let m={...G.ambient,...l.ambient},g=new q(m.color,m.intensity);g.visible=m.visible??!1;let c={...G.directional,...l.directional},d=new fe(c.color,c.intensity);d.position.copy(c.position),d.visible=c.visible??!1;let x=new ye(d,5),w={...G.point,...l.point},f=new B(w.color,w.intensity,w.distance,w.decay);f.position.copy(w.position),f.visible=w.visible??!1;let u=new we(f,5);this.lights={ambient:g,directional:d,point:f,dirHelper:x,pointHelper:u},this.world.scene.add(this.ring,this.mirror,g,d,f,x,u),this.setupGui()});i(this,"setCameraAndControls",()=>{this.world.camera.position.copy(this.cameraPosDefault),this.world.camera.far=200,this.world.camera.updateProjectionMatrix(),this.world.controls.maxPolarAngle=Math.PI*.5,this.world.controls.minPolarAngle=Math.PI*0,this.world.controls.enableZoom=!1,this.world.controls.enabled=!1});i(this,"onWheel",r=>{this.wheelAcceleration=r.deltaY*1e-4});i(this,"setupGui",()=>{this.gui=new xe,Ue(this)});i(this,"tick",()=>{this.stats.begin();const r=this.timer.elapsed;this.ring.tick(r);let e=E(this.mouse.pos.x,-1,1,this.mirrorX.min,this.mirrorX.max),s=E(this.mouse.pos.y,-1,1,this.mirrorZ.max,this.mirrorZ.min);this.mirror.position.x=O(this.mirror.position.x,e,.02),this.mirror.position.z=O(this.mirror.position.z,s,.02),this.wheelVelocity+=this.wheelAcceleration,this.wheelVelocity=Q(this.wheelVelocity,-this.maxAcceleration,this.maxAcceleration),this.wheelAcceleration=0,this.wheelVelocity*=this.velMult,this.ring.rotation.y+=this.wheelVelocity,this.world.render(),this.stats.end()});i(this,"dispose",()=>{this.world.scene.remove(this.ring,this.mirror,this.lights.ambient,this.lights.directional,this.lights.point,this.lights.dirHelper,this.lights.pointHelper),this.ring.dispose(),this.mirror.dispose(),this.lights.ambient.dispose(),this.lights.directional.dispose(),this.lights.dirHelper.dispose(),this.lights.point.dispose(),this.lights.pointHelper.dispose(),this.gui.destroy()});this.stats=new ve,this.stats.dom.style.bottom="0px",this.stats.dom.style.top="",document.body.appendChild(this.stats.dom),this.sizes=new be,this.mouse=new Pe(this.sizes),this.timer=new ze,this.world=new _e(this.sizes),this.setFromParams(r),this.timer.on("tick",this.tick),window.addEventListener("wheel",this.onWheel)}set clearColor(r){this.world.renderer.setClearColor(r)}}new Te;
